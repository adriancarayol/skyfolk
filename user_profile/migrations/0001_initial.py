# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-26 12:59
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import user_profile.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('timeline', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('notifications', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AffinityUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affinity', models.IntegerField(default=0, verbose_name='affinity')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='AuthDevices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('browser_token', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='LikeProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Following'), (2, 'Follower'), (3, 'Blocked')])),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Following'), (2, 'Follower'), (3, 'Blocked')])),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backImage', models.ImageField(blank=True, null=True, upload_to=user_profile.models.uploadBackImagePath, verbose_name='BackImage')),
                ('status', models.CharField(max_length=20, null=True, verbose_name='estado')),
                ('privacity', models.CharField(choices=[('OF', 'OnlyFo'), ('OFAF', 'OnlyFAF'), ('A', 'All'), ('N', 'Nothing')], default='A', max_length=4)),
                ('is_first_login', models.BooleanField(default=True)),
                ('personal_pin', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('likeprofiles', models.ManyToManyField(related_name='likesToMe', through='user_profile.LikeProfile', to='user_profile.UserProfile')),
                ('relationships', models.ManyToManyField(related_name='related_to', through='user_profile.Relationship', to='user_profile.UserProfile')),
                ('requests', models.ManyToManyField(related_name='requestsToMe', through='user_profile.Request', to='user_profile.UserProfile')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('timeline', models.ManyToManyField(related_name='timeline_to', through='timeline.Timeline', to='user_profile.UserProfile')),
                ('ultimosUsuariosVisitados', models.ManyToManyField(related_name='_userprofile_ultimosUsuariosVisitados_+', to='user_profile.UserProfile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        migrations.AddField(
            model_name='request',
            name='emitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_request', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='request',
            name='notification',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='request_notification', to='notifications.Notification'),
        ),
        migrations.AddField(
            model_name='request',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_request', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='relationship',
            name='from_person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_people', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='relationship',
            name='to_person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_people', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='likeprofile',
            name='from_like',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_likeprofile', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='likeprofile',
            name='to_like',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_likeprofile', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='authdevices',
            name='user_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_to_profile', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='affinityuser',
            name='emitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_profile_affinity', to='user_profile.UserProfile'),
        ),
        migrations.AddField(
            model_name='affinityuser',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_profile_affinity', to='user_profile.UserProfile'),
        ),
        migrations.AlterUniqueTogether(
            name='request',
            unique_together=set([('emitter', 'receiver', 'status')]),
        ),
        migrations.AlterUniqueTogether(
            name='relationship',
            unique_together=set([('from_person', 'to_person', 'status')]),
        ),
        migrations.AlterUniqueTogether(
            name='likeprofile',
            unique_together=set([('from_like', 'to_like')]),
        ),
        migrations.AlterUniqueTogether(
            name='affinityuser',
            unique_together=set([('emitter', 'receiver')]),
        ),
    ]
