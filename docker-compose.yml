version: '3'
services:    
  # redis
  redis:
    image: redis:4.0
    hostname: redis
    restart: always
    networks:
      - skyfolknetwork
  
  # neo4j
  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/1518
    volumes:
      - ./run/db/dbms:/data/dbms
#      - ./neo4j:/var/lib/neo4j/plugins
    restart: always
    networks:
      - skyfolknetwork
    depends_on:
      - dbpostgres

#  zookeeper:
#      image: debezium/zookeeper:latest
#      ports:
#       - "2181:2181"
#       - "2888:2888"
#       - "3888:3888"
#      networks:
#         - skyfolknetwork
#  kafka:
#    image: debezium/kafka:latest
#    ports:
#      - "9092:9092"
#    environment:
#      - ZOOKEEPER_CONNECT=zookeeper:2181
#    networks:
#      - skyfolknetwork
#
#  connect:
#    image: debezium/connect-jdbc-es:latest
#    build:
#      context: debezium-jdbc-es
#    ports:
#      - "8083:8083"
#      - "5005:5005"
#    networks:
#      - skyfolknetwork
#    environment:
#      - BOOTSTRAP_SERVERS=kafka:9092
#      - GROUP_ID=1
#      - CONFIG_STORAGE_TOPIC=my_connect_configs
#      - OFFSET_STORAGE_TOPIC=my_connect_offsets

  # postgresql
  dbpostgres:
    image: debezium/postgres:9.6
    volumes:
      - ./run/postgresql:/var/lib/postgresql
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=skyfolk
      - POSTGRES_PASSWORD=skyfolk_password
      - POSTGRES_DB=skyfolk_db
    networks:
      - skyfolknetwork

  # elasticsearch
  elasticsearch:
    image: elasticsearch:2.4.6
    container_name: elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - ./run/esdata/:/usr/share/elasticsearch/data/
    restart: always
    environment:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.security.enabled=false
    networks:
      - skyfolknetwork

  # kibana
  kibana:
    image: kibana:4.6.0
    ports:
      - "5601:5601"
    restart: always
    volumes:
      - ./run/kibana/config/:/usr/share/kibana/config
    depends_on:
      - elasticsearch
    networks:
      - skyfolknetwork

  # rabbitmq nodo 1
  rabbit:
    hostname: rabbit
    image: rabbitmq:latest
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_ERLANG_COOKIE='secret_cookie' 
    ports:
      - "5672:5672"  # we forward this port because it's useful for debugging
      - "15672:15672"  # here, we can access rabbitmq management plugin
    restart: always
    networks:
      - skyfolknetwork
      
  # golang app
  go_skyfolk:
    build:
      context: .
      dockerfile: skyfolk_services/Dockerfile
    ports:
      - "1800:1800"
    networks:
      - skyfolknetwork
    restart: on-failure
    depends_on:
      - redis
      - dbpostgres
  # django app
  web:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    image: skyfolk/web
    hostname: web
    command: ./run_web.sh
    volumes:
      - .:/code  # mount current directory inside container
      - /tmp:/tmp
    ports:
        - "8000:8000"
    depends_on:
      - rabbit
      - neo4j
      - dbpostgres
    networks:
      - skyfolknetwork
    restart: always

  # celery worker
  celery_worker:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    image: skyfolk/celery-worker
    command: ./run_celery.sh
    volumes:
      - .:/code
      - /tmp:/tmp
    networks:
      - skyfolknetwork
    depends_on:
      - web
    restart: always

  # celery beat
  celery_beat:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    image: skyfolk/celery-beat
    command: ./run_beat.sh
    volumes:
      - .:/code
      - /tmp:/tmp
    networks:
      - skyfolknetwork
    depends_on:
      - web
    restart: always

networks:
  skyfolknetwork:
    driver: bridge 
