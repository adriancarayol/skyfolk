version: '2'

services:   
  # PostgreSQL database
  db:
    image: postgres:9.6.5
    hostname: db
    environment:
      - POSTGRES_USER=skyfolk_pre
      - POSTGRES_PASSWORD=gDFgg$$G=4h_%H
      - POSTGRES_DB=skyfolk_pre_db
    ports:
      - "5432:5432"
    volumes:
      - "dbdata:/var/lib/postgresql/data"

  # Neo4j datbase
  neo4j:
    image: neo4j:latest
    environment:
      - NEO4J_AUTH=neo4j/1518
      - NEO4J_HEAP_MEMORY=2048
      - NEO4J_CACHE_MEMORY=1G 
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - "./db/dbms:/data/dbms"

  # Redis
  redis:
    image: redis:4.0
    hostname: redis
    
  # elasticsearch
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.2
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - http.cors.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - esnet

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.2
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "discovery.zen.ping.unicast.hosts=elasticsearch1"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - esnet

  # RabbitMQ
  rabbit:
    hostname: rabbit
    image: rabbitmq:3.6.12
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_ERLANG_COOKIE='secret_cookie' 
    ports:
      - "5672:5672"  # we forward this port because it's useful for debugging
      - "15672:15672"  # here, we can access rabbitmq management plugin

  # Django web server
  web:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    hostname: web
    command: ./run_web.sh
    volumes:
      - .:/code  # mount current directory inside container
    ports:
      - "8000:8000"
    links:
      - db
      - rabbit
      - neo4j
      - redis
      - elasticsearch1
      - elasticsearch2
    depends_on:
      - db
      - neo4j
      - rabbit
  # Celery worker
  worker:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    command: ./run_celery.sh
    volumes:
      - .:/code
    links:
      - neo4j
      - db
      - rabbit
      - redis
      - web
    depends_on:
      - web


volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local
  dbdata:
    driver: local

networks:
  esnet:
