version: '3'

services:   
  mail:
    image: tvial/docker-mailserver:latest
    hostname: mail
    domainname: skyfolk.net
    container_name: mail
    restart: always
    ports:
      - "25:25"
      - "143:143"
      - "587:587"
      - "993:993"
    volumes:
      - maildata:/var/mail
      - mailstate:/var/mail-state
      - ./config/:/tmp/docker-mailserver/
    environment:
      - ENABLE_SPAMASSASSIN=1
      - ENABLE_CLAMAV=1
      - ENABLE_FAIL2BAN=1
      - ENABLE_POSTGREY=1
      - ONE_DIR=1
      - DMS_DEBUG=0
      - ENABLE_LDAP=1
      - LDAP_SERVER_HOST=skyfolk.net
      - LDAP_SEARCH_BASE=ou=people,dc=localhost,dc=localdomain
      - LDAP_BIND_DN=cn=admin,dc=localhost,dc=localdomain
      - LDAP_BIND_PW=admin
      - LDAP_QUERY_FILTER_USER="(&(mail=%s)(mailEnabled=TRUE))"
      - LDAP_QUERY_FILTER_GROUP="(&(mailGroupMember=%s)(mailEnabled=TRUE))"
      - LDAP_QUERY_FILTER_ALIAS="(&(mailAlias=%s)(mailEnabled=TRUE))"
      - DOVECOT_PASS_FILTER="(&(objectClass=PostfixBookMailAccount)(uniqueIdentifier=%n))"
      - DOVECOT_USER_FILTER="(&(objectClass=PostfixBookMailAccount)(uniqueIdentifier=%n))"
      - ENABLE_SASLAUTHD=1
      - SASLAUTHD_MECHANISMS=ldap
      - SASLAUTHD_LDAP_SERVER=ldap
      - SASLAUTHD_LDAP_BIND_DN=cn=admin,dc=localhost,dc=localdomain
      - SASLAUTHD_LDAP_PASSWORD=admin
      - SASLAUTHD_LDAP_SEARCH_BASE=ou=people,dc=localhost,dc=localdomain
      - POSTMASTER_ADDRESS=postmaster@localhost.localdomain 
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    networks:
      - webnet
  nginx:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - .:/code
      - /tmp:/tmp
      - ./config/nginx:/etc/nginx/conf.d
    environment:
      - NGINX_PORT=80
    depends_on:
      - web
    networks:
      - webnet
  # PostgreSQL database
  db:
    image: postgres:9.6.5
    hostname: db
    environment:
      - POSTGRES_USER=skyfolk_pre
      - POSTGRES_PASSWORD=gDFgg$$G=4h_%H
      - POSTGRES_DB=skyfolk_pre_db
    ports:
      - "5432:5432"
    volumes:
      - "dbdata:/var/lib/postgresql/data"
    restart: always
    networks:
      - webnet

  # Neo4j datbase
  neo4j:
    image: neo4j:latest
    environment:
      - NEO4J_AUTH=neo4j/1518
      - NEO4J_HEAP_MEMORY=2048
      - NEO4J_CACHE_MEMORY=1G 
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - "./db/dbms:/var/lib/neo4j/data"
    restart: always
    networks:
      - webnet

  # Redis
  redis:
    image: redis:4.0
    hostname: redis
    restart: always
    networks:
      - webnet
    
  # elasticsearch
  elasticsearch:
    image: elasticsearch:2.4.2
    ports:
      - "9200:9200"
    volumes:
      - ./esdata/:/usr/share/elasticsearch/data/
    restart: always
    networks:
      - webnet

  kibana:
    image: kibana:4.6.0
    ports:
      - "5601:5601"
    restart: always
    volumes:
      - ./kibana/config/:/usr/share/kibana/config
    depends_on:
      - elasticsearch
    networks:
      - webnet

  # RabbitMQ
  rabbit:
    hostname: rabbit
    image: rabbitmq:3.6.12
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_ERLANG_COOKIE='secret_cookie' 
    ports:
      - "5672:5672"  # we forward this port because it's useful for debugging
      - "15672:15672"  # here, we can access rabbitmq management plugin
    restart: always
    networks:
      - webnet

  webworker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/code
      - /tmp:/tmp
    command: ./run_worker.sh
    env_file:
      - web-variables.env
    networks:
      - webnet
    depends_on:
      - db
      - neo4j
      - rabbit
    restart: always
  # Django web server
  web:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    hostname: web
    command: ./run_web.sh
    volumes:
      - .:/code  # mount current directory inside container
      - /tmp:/tmp
    ports:
      - "8000:8000"
    networks:
      - webnet
    depends_on:
      - db
      - neo4j
      - rabbit
    networks:
      - webnet
    restart: always
  # Celery worker
  celery_worker:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    command: ./run_celery.sh
    volumes:
      - .:/code
      - /tmp:/tmp
    networks:
      - webnet
    depends_on:
      - web
      - db
      - neo4j
    restart: always
  celery_beat:
    env_file:
      - web-variables.env
    build:
      context: .
      dockerfile: Dockerfile
    command: ./run_beat.sh
    volumes:
      - .:/code
      - /tmp:/tmp
    networks:
      - webnet
    depends_on:
      - web
      - db
      - neo4j
    restart: always

volumes:
  dbdata:
    driver: local
  maildata:
    driver: local
  mailstate:
    driver: local

networks:
  webnet:
    driver: bridge 
